name: Automatically triggered JUnit5 tests by push on matrix OS and Browsers

on:
  push:

jobs:
  test:
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        browser: [chrome, firefox, edge, safari]
        exclude:
          - os: ubuntu-latest
            browser: edge
          - os: macos-latest
            browser: edge
          - os: ubuntu-latest
            browser: safari
          - os: windows-latest
            browser: safari

    runs-on: ${{ matrix.os }}

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '21'

    - name: Install Chrome (Linux)
      if: matrix.browser == 'chrome' && runner.os == 'Linux'
      uses: browser-actions/setup-chrome@v1
      with:
        install-dependencies: true

    - name: Install Chrome (non-Linux)
      if: matrix.browser == 'chrome' && runner.os != 'Linux'
      uses: browser-actions/setup-chrome@v1

    - name: Install Firefox
      if: matrix.browser == 'firefox'
      uses: browser-actions/setup-firefox@v1

    - name: Install Edge
      if: matrix.browser == 'edge'
      uses: browser-actions/setup-edge@v1
      with:
        edge-version: 'stable'

    - name: Run tests with Maven
      working-directory: ${{ github.workspace }}
      shell: bash
      run: |
        PROFILE_DIR=$(mktemp -d)
        
        if [ "${{ matrix.browser }}" = "chrome" ]; then
          if [[ "${{ matrix.os }}" == "ubuntu-latest" || "${{ matrix.os }}" == "macos-latest" ]]; then
            CHROME_ARGS="--headless=new --no-sandbox --disable-dev-shm-usage --user-data-dir=$PROFILE_DIR"
            mvn clean test -Dbrowser=chrome -Dchrome.args="$CHROME_ARGS"
         else
          mvn clean test -Dbrowser=chrome
          fi
        
        elif [ "${{ matrix.browser }}" = "firefox" ]; then
            mvn clean test -Dbrowser=firefox -Dfirefox.options="--headless"

        elif [ "${{ matrix.browser }}" = "edge" ]; then
            EDGE_ARGS="--headless=new --no-sandbox --disable-dev-shm-usage --user-data-dir=$PROFILE_DIR"
            mvn clean test -Dbrowser=edge -Dedge.args="$EDGE_ARGS"
        
        elif [ "${{ matrix.browser }}" = "safari" ]; then
        mvn clean test -Dbrowser=safari
        fi

    - name: Add Allure Executor info
      shell: bash
      run: |
        mkdir -p target/allure-results
        BROWSER="${{ matrix.browser }}"
        OS="${{ matrix.os }}"
        DATE=$(date +'%Y-%m-%d %H:%M:%S')
        cat <<EOF > target/allure-results/executor.json
        {
        "name": "GitHub Actions",
        "type": "github",
        "url": "https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}",
        "buildOrder": 1,
        "buildName": "${BROWSER} on ${OS} — ${DATE}",
        "buildUrl": "https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}",
        "reportUrl": "",
        "reportName": "Allure Report"
        }
        EOF

    - name: Get latest Allure CLI version
      id: allure-version
      shell: bash
      run: |
        if ! command -v jq >/dev/null; then
          echo "jq not found — trying to install it..."
          if [[ "$(uname)" == "Darwin" ]]; then
            brew install jq
          elif [[ "$(uname -s)" == "Linux" ]]; then
            sudo apt-get update && sudo apt-get install -y jq
          fi
        fi

        VERSION=$(curl -s https://api.github.com/repos/allure-framework/allure2/releases/latest | jq -r .tag_name)
        if [ -z "$VERSION" ] || [ "$VERSION" = "null" ]; then
           VERSION="2.34.1"
           echo "Failed to get latest version, using fallback: $VERSION"
        fi
        echo "Latest Allure version is $VERSION"
        echo "version=$VERSION" >> $GITHUB_OUTPUT

    - name: Download Allure CLI
      shell: bash
      run: |
        curl -L -o allure.zip https://github.com/allure-framework/allure2/releases/download/${{ steps.allure-version.outputs.version }}/allure-${{ steps.allure-version.outputs.version }}.zip
        unzip allure.zip -d allure

        BIN_PATH=$(find allure -type f -name allure -path "*bin/*" | head -n 1)
        if [ -z "$BIN_PATH" ]; then
        
          echo "Allure CLI binary not found"
          exit 1
        fi
        chmod +x "$BIN_PATH"
        echo "BIN=$BIN_PATH" >> $GITHUB_ENV


    - name: Generate Allure Report
      shell: bash
      run: |
        "$BIN" generate target/allure-results --clean -o target/allure-report || echo "No report generated"

    - name: Upload Allure Report as Artifact
      uses: actions/upload-artifact@v4
      with:
        name: allure-report-${{ matrix.os }}-${{ matrix.browser }}
        path: target/allure-report