name: Automatically triggered JUnit5 tests by push on matrix OS and Browsers

on:
  push:

jobs:
  test:
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        browser: [chrome, firefox, edge]
        exclude:
          - os: ubuntu-latest
            browser: edge
          - os: macos-latest
            browser: edge

    runs-on: ${{ matrix.os }}

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '21'

    - name: Install Chrome (Linux)
      if: matrix.browser == 'chrome' && runner.os == 'Linux'
      uses: browser-actions/setup-chrome@v1
      with:
        install-dependencies: true

    - name: Install Chrome (non-Linux)
      if: matrix.browser == 'chrome' && runner.os != 'Linux'
      uses: browser-actions/setup-chrome@v1

    - name: Install Firefox
      if: matrix.browser == 'firefox'
      uses: browser-actions/setup-firefox@v1

    - name: Install Edge
      if: matrix.browser == 'edge'
      uses: browser-actions/setup-edge@v1
      with:
        edge-version: 'stable'

    - name: Run tests with Maven
      working-directory: ${{ github.workspace }}
      shell: bash
      run: |
        PROFILE_DIR=$(mktemp -d)
        
        if [ "${{ matrix.browser }}" = "chrome" ]; then
          if [[ "${{ matrix.os }}" == "ubuntu-latest" || "${{ matrix.os }}" == "macos-latest" ]]; then
            CHROME_ARGS="--headless=new --no-sandbox --disable-dev-shm-usage --user-data-dir=$PROFILE_DIR"
            mvn clean test -Dbrowser=chrome -Dchrome.args="$CHROME_ARGS"
         else
          mvn clean test -Dbrowser=chrome
          fi
        
        elif [ "${{ matrix.browser }}" = "firefox" ]; then
            mvn clean test -Dbrowser=firefox -Dfirefox.options="--headless"

        elif [ "${{ matrix.browser }}" = "edge" ]; then
            EDGE_ARGS="--headless=new --no-sandbox --disable-dev-shm-usage --user-data-dir=$PROFILE_DIR"
            mvn clean test -Dbrowser=edge -Dedge.args="$EDGE_ARGS"
        fi

    - name: Get latest Allure CLI version
      id: allure-version
      shell: bash
      run: |
        VERSION=$(curl -s https://api.github.com/repos/allure-framework/allure2/releases/latest | grep tag_name | cut -d '"' -f4)
        echo "Latest Allure version is $VERSION"
        echo "version=$VERSION" >> $GITHUB_OUTPUT

    - name: Download Allure CLI ${{ steps.allure-version.outputs.version }}
      shell: bash
      run: |
        VERSION=${{ steps.allure-version.outputs.version }}
        curl -L -o allure.zip https://github.com/allure-framework/allure2/releases/download/$VERSION/allure-$VERSION.zip
              
        if unzip -t allure.zip >/dev/null 2>&1; then
          unzip allure.zip -d allure
          chmod +x allure/bin/allure
        else
          echo "Allure archive is invalid or failed to unzip"
          exit 1
        fi

    - name: Generate Allure Report
      shell: bash
      run: |
        allure/bin/allure generate target/allure-results --clean -o target/allure-report || echo "No report generated"

    - name: Upload Allure Report as Artifact
      uses: actions/upload-artifact@v4
      with:
        name: allure-report-${{ matrix.os }}-${{ matrix.browser }}
        path: target/allure-report